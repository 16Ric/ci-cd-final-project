---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  description: This task will clean up a workspace by deleting all the files.
  workspaces:
    - name: source
  steps:
    - name: remove
      image: alpine:3
      env:
        - name: WORKSPACE_SOURCE_PATH
          value: $(workspaces.source.path)
      workingDir: $(workspaces.source.path)
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
      script: |
        #!/usr/bin/env sh
        set -eu
        echo "Removing all files from ${WORKSPACE_SOURCE_PATH} ..."
        if [ -d "${WORKSPACE_SOURCE_PATH}" ] ; then
          rm -rf "${WORKSPACE_SOURCE_PATH:?}"/*
          rm -rf "${WORKSPACE_SOURCE_PATH}"/.[!.]*
          rm -rf "${WORKSPACE_SOURCE_PATH}"/..?*
        fi

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: flake8
spec:
  workspaces:
    - name: source
  steps:
    - name: lint
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        echo "Upgrading pip..."
        python -m pip install --upgrade pip setuptools wheel
        if [ -f requirements.txt ]; then
          echo "Installing requirements..."
          pip install -r requirements.txt
        fi
        echo "Installing flake8..."
        pip install flake8
        echo "Running flake8..."
        flake8 .

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: nose
spec:
  workspaces:
    - name: source
  params:
    - name: args
      description: Arguments to pass to nose
      type: string
      default: "-v"
  steps:
    - name: nosetests
      image: python:3.9-slim
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
        nosetests $(params.args)

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: oc-client
spec:
  workspaces:
    - name: source
  params:
    - name: app-name
      description: Name of the application to deploy
      type: string
    - name: build-image
      description: Image to deploy
      type: string
  steps:
    - name: deploy
      image: 'registry.redhat.io/openshift4/ose-cli:latest'
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/bash
        set -e
        echo "Deploying app $(params.app-name) with image $(params.build-image)"
        oc create deployment $(params.app-name) \
          --image=$(params.build-image) \
          --dry-run=client -o yaml | oc apply -f -